<Introduction>
Run the following cell to load your data and some utility functions.

****************
import pandas as pd

reviews = pd.read_csv("../input/wine-reviews/winemag-data-130k-v2.csv", index_col=0)

from learntools.core import binder; binder.bind(globals())
from learntools.pandas.renaming_and_combining import *
print("Setup complete.")

Setup complete.
****************

<Pre-exercise>
View the first several lines of your data by running the cell below.

****************
reviews.head()

country	description	designation	points	price	province	region_1	region_2	taster_name	taster_twitter_handle	title	variety	winery
0	Italy	Aromas include tropical fruit, broom, brimston...	Vulkà Bianco	87	NaN	Sicily & Sardinia	Etna	NaN	Kerin O’Keefe	@kerinokeefe	Nicosia 2013 Vulkà Bianco (Etna)	White Blend	Nicosia
1	Portugal	This is ripe and fruity, a wine that is smooth...	Avidagos	87	15.0	Douro	NaN	NaN	Roger Voss	@vossroger	Quinta dos Avidagos 2011 Avidagos Red (Douro)	Portuguese Red	Quinta dos Avidagos
2	US	Tart and snappy, the flavors of lime flesh and...	NaN	87	14.0	Oregon	Willamette Valley	Willamette Valley	Paul Gregutt	@paulgwine	Rainstorm 2013 Pinot Gris (Willamette Valley)	Pinot Gris	Rainstorm
3	US	Pineapple rind, lemon pith and orange blossom ...	Reserve Late Harvest	87	13.0	Michigan	Lake Michigan Shore	NaN	Alexander Peartree	NaN	St. Julian 2013 Reserve Late Harvest Riesling ...	Riesling	St. Julian
4	US	Much like the regular bottling from 2012, this...	Vintner's Reserve Wild Child Block	87	65.0	Oregon	Willamette Valley	Willamette Valley	Paul Gregutt	@paulgwine	Sweet Cheeks 2012 Vintner's Reserve Wild Child...	Pinot Noir	Sweet Cheeks
****************

<Exercise 1>
region_1 and region_2 are pretty uninformative names for locale columns in the dataset. Create a copy of reviews with these columns renamed to region and locale, respectively.

****************
# Your code here
renamed = reviews.rename(columns=dict(region_1='region', region_2='locale'))

# Check your answer
q1.check()

Correct

q1.hint()
q1.solution()

Hint:
Use rename(), and specify a columns parameter.

Solution:
renamed = reviews.rename(columns=dict(region_1='region', region_2='locale'))
****************

<Exercise 2>
Set the index name in the dataset to wines.

****************
reindexed = reviews.rename_axis("wines", axis='rows')

# Check your answer
q2.check()

reindexed = reviews.rename_axis("wines", axis='rows')

Correct

q2.hint()
q2.solution()

Hint:
Use the rename_axis() method.

Solution:
reindexed = reviews.rename_axis('wines', axis='rows')
****************

<Exercise 3>
The Things on Reddit dataset includes product links from a selection of top-ranked forums ("subreddits") on reddit.com. Run the cell below to load a dataframe of products
mentioned on the /r/gaming subreddit and another dataframe for products mentioned on the r//movies subreddit.

****************
gaming_products = pd.read_csv("../input/things-on-reddit/top-things/top-things/reddits/g/gaming.csv")
gaming_products['subreddit'] = "r/gaming"
movie_products = pd.read_csv("../input/things-on-reddit/top-things/top-things/reddits/m/movies.csv")
movie_products['subreddit'] = "r/movies"

Create a DataFrame of products mentioned on either subreddit.

combined_products = pd.concat([gaming_products, movie_products])

# Check your answer
q3.check()

Correct

q3.hint()
q3.solution()

Hint:
Use pd.concat()

Solution:
combined_products = pd.concat([gaming_products, movie_products])
****************

<Exercise 4>
The Powerlifting Database dataset on Kaggle includes one CSV table for powerlifting meets and a separate one for powerlifting competitors. Run the cell below to load these
datasets into dataframes.

****************
powerlifting_meets = pd.read_csv("../input/powerlifting-database/meets.csv")
powerlifting_competitors = pd.read_csv("../input/powerlifting-database/openpowerlifting.csv")

Both tables include references to a MeetID, a unique key for each meet (competition) included in the database. Using this, generate a dataset combining the two tables into
one.

powerlifting_combined = powerlifting_meets.set_index("MeetID").join(powerlifting_competitors.set_index("MeetID"))

# Check your answer
q4.check()

Correct

q4.hint()
q4.solution()

Hint:
Use pd.Dataframe.join().

Solution:
powerlifting_combined = powerlifting_meets.set_index("MeetID").join(powerlifting_competitors.set_index("MeetID"))
****************
